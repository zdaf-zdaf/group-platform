name: group-pipeline

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

jobs:
  test-backend:
    runs-on: ubuntu-latest
    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: rootpassword
          MYSQL_DATABASE: test_db
          MYSQL_DEFAULT_AUTHENTICATION_PLUGIN: mysql_native_password
        ports:
          - 3306:3306
        options: >-
          --health-cmd="mysqladmin ping"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=3
    defaults:
      run:
        working-directory: ./backend
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@5
        with:
          python-version: '3.10'

      - name: Install dependencies with pip
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: ‚öôÔ∏è Configure MySQL for Django
        run: |
            sudo apt-get update && sudo apt-get install -y mysql-client
            for i in {1..30}; do
            if mysqladmin ping -h"127.0.0.1" -uroot -prootpassword --silent; then
                echo "MySQL is ready!"
                break
            fi
            echo "Waiting for MySQL... (attempt $i/30)"
            sleep 2
            done
            mysql -h"127.0.0.1" -uroot -prootpassword -e "
            ALTER USER 'root'@'%' IDENTIFIED WITH mysql_native_password BY 'rootpassword';
            ALTER USER 'root'@'localhost' IDENTIFIED WITH mysql_native_password BY 'rootpassword';
            FLUSH PRIVILEGES;
            "

      - name: Run Django tests
        run: |
            echo "1. Ê£ÄÊü•ÂΩìÂâçÁõÆÂΩïÂíåPythonË∑ØÂæÑ"
            pwd
            echo "PYTHONPATH: $PYTHONPATH"
            
            echo "2. Ê£ÄÊü•ÁéØÂ¢ÉÂèòÈáè"
            echo "DB_ENGINE: $DB_ENGINE"
            echo "DB_NAME: $DB_NAME"
            echo "DB_USER: $DB_USER"
            echo "DB_HOST: $DB_HOST"
            echo "DB_PORT: $DB_PORT"

            echo "3. Ê£ÄÊü•DjangoÈÖçÁΩÆÊ®°ÂùóÊòØÂê¶ËÉΩË¢´Ê≠£Á°ÆÂØºÂÖ•"
            python -c "
            import os
            print('DJANGO_SETTINGS_MODULEÁéØÂ¢ÉÂèòÈáè:', os.environ.get('DJANGO_SETTINGS_MODULE'))
            try:
                from django.conf import settings
                print('ÊàêÂäüÂØºÂÖ•settingsÊ®°ÂùóÔºÅ')
                print('‰ΩøÁî®ÁöÑËÆæÁΩÆÊñá‰ª∂:', settings.SETTINGS_MODULE)
            except Exception as e:
                print('ÂØºÂÖ•Â§±Ë¥•ÔºåÈîôËØØ‰ø°ÊÅØ:', e)
            "
            
            echo "4. ‰ª•ËØ¶ÁªÜÊ®°ÂºèËøêË°åÊµãËØï"
            python manage.py test --verbosity=2
        env:
            DJANGO_SETTINGS_MODULE: server.settings
            PYTHONPATH: ${{ github.workspace }}/backend
            DB_ENGINE: django.db.backends.mysql
            DB_NAME: test_db
            DB_USER: root
            DB_PASSWORD: rootpassword
            DB_HOST: 127.0.0.1 
            DB_PORT: 3306
            DEBUG: False

  api-test-all:
    name: üß™ Run All API Tests (Sequential)
    runs-on: ubuntu-latest
    needs: [test-backend]
    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: rootpassword
          MYSQL_DATABASE: test_db
          MYSQL_DEFAULT_AUTHENTICATION_PLUGIN: mysql_native_password
        ports:
          - 3306:3306
        options: >-
          --health-cmd="mysqladmin ping"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=3

    steps:
      - name: üì• Checkout code
        uses: actions/checkout@v4
      
      - name: üêç Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'
      
      - name: üì¶ Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
        working-directory: ./backend
      
      - name: ‚öôÔ∏è Configure MySQL
        run: |
          sudo apt-get update && sudo apt-get install -y mysql-client
          for i in {1..30}; do
            if mysqladmin ping -h"127.0.0.1" -uroot -prootpassword --silent; then
              echo "MySQL is ready!"
              break
            fi
            echo "Waiting for MySQL... (attempt $i/30)"
            sleep 2
          done
          mysql -h"127.0.0.1" -uroot -prootpassword -e "
            ALTER USER 'root'@'%' IDENTIFIED WITH mysql_native_password BY 'rootpassword';
            FLUSH PRIVILEGES;
          "
      
      - name: üöÄ Start Django Server
        run: |
          python manage.py runserver 0.0.0.0:8000 > django-server.log 2>&1 &
          SERVER_PID=$!
          echo "Django server started with PID: $SERVER_PID"
          echo $SERVER_PID > server.pid
          
          for i in {1..10}; do
            if curl -s http://localhost:8000/ > /dev/null; then
              echo "Server is up and running!"
              break
            fi
            echo "Waiting for server to start... ($i/10)"
            sleep 3
          done
          
          if ! ps -p $SERVER_PID > /dev/null; then
            echo "Django server failed to start!"
            cat django-server.log
            exit 1
          fi
        working-directory: ./backend
        env:
          DJANGO_SETTINGS_MODULE: server.settings
          DB_ENGINE: django.db.backends.mysql
          DB_NAME: test_db
          DB_USER: root
          DB_PASSWORD: rootpassword
          DB_HOST: 127.0.0.1
          DB_PORT: 3306
          DEBUG: False
      
      - name: üì¶ Install Newman
        run: npm install -g newman
      
      - name: üí¨ Run Forum Tests (LunTan)
        run: |
          sed -i 's/localhost/127.0.0.1/g' postman/environment.json
          newman run postman/collection1-LunTan.json \
            --environment postman/environment.json \
            --global-var "api_url=127.0.0.1:8000" \
            --reporters cli
          echo "Forum tests completed!"
      
      - name: üóëÔ∏è Clean Database After Forum Tests
        run: |
          python manage.py flush --no-input
          echo "Database cleaned after forum tests!"
        working-directory: ./backend
        env:
          DJANGO_SETTINGS_MODULE: server.settings
          DB_ENGINE: django.db.backends.mysql
          DB_NAME: test_db
          DB_USER: root
          DB_PASSWORD: rootpassword
          DB_HOST: 127.0.0.1
          DB_PORT: 3306
          DEBUG: False
      
      - name: üî¨ Run Lab Tests
        run: |
          newman run postman/collection2-Lab.json \
            --environment postman/environment.json \
            --global-var "api_url=127.0.0.1:8000" \
            --reporters cli
          echo "Lab tests completed!"
      
      - name: üóëÔ∏è Clean Database After Lab Tests
        run: |
          python manage.py flush --no-input
          echo "Database cleaned after lab tests!"
        working-directory: ./backend
        env:
          DJANGO_SETTINGS_MODULE: server.settings
          DB_ENGINE: django.db.backends.mysql
          DB_NAME: test_db
          DB_USER: root
          DB_PASSWORD: rootpassword
          DB_HOST: 127.0.0.1
          DB_PORT: 3306
          DEBUG: False
      
      - name: üì¢ Run Announcement Tests (GongGao)
        run: |
          newman run postman/collection3-GongGao.json \
            --environment postman/environment.json \
            --global-var "api_url=127.0.0.1:8000" \
            --reporters cli
          echo "Announcement tests completed!"
      
      - name: üóëÔ∏è Final Database Cleanup
        run: |
          python manage.py flush --no-input
          echo "Final database cleanup completed!"
        working-directory: ./backend
        env:
          DJANGO_SETTINGS_MODULE: server.settings
          DB_ENGINE: django.db.backends.mysql
          DB_NAME: test_db
          DB_USER: root
          DB_PASSWORD: rootpassword
          DB_HOST: 127.0.0.1
          DB_PORT: 3306
          DEBUG: False
      
      - name: üõë Stop Django Server
        run: |
          if [ -f server.pid ]; then
            SERVER_PID=$(cat server.pid)
            echo "Stopping Django server with PID: $SERVER_PID"
            kill $SERVER_PID || true
            rm -f server.pid
          fi
          echo "Django server stopped!"

  test-frontend:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./frontend
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: './frontend/package-lock.json'

      - name: Install frontend dependencies
        run: npm ci

      - name: Run frontend unit tests
        run: npm run test:unit

  gui-test-cypress:
    name: üñ•Ô∏è Run Cypress GUI Tests
    runs-on: ubuntu-latest
    needs: [test-frontend, api-test-all]
    steps:
      - name: üì• Checkout code
        uses: actions/checkout@v4

      - name: ‚éî Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: './frontend/package-lock.json'

      - name: üì¶ Install Frontend Dependencies
        run: npm ci
        working-directory: ./frontend

      - name: ‚úÖ Run Cypress Tests
        run: npx cypress run --headless
        working-directory: ./frontend

  build-and-push-backend:
    runs-on: ubuntu-latest
    needs: [test-backend]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GHCR_PAT }}

      - name: Build and Push Backend Image
        uses: docker/build-push-action@v5
        with:
          context: ./backend
          push: true
          tags: |
            ghcr.io/${{ github.repository_owner }}/backend:latest
            ghcr.io/${{ github.repository_owner }}/backend:${{ github.sha }}

  build-and-push-frontend:
    runs-on: ubuntu-latest
    needs: [test-frontend]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GHCR_PAT }}

      - name: Build and Push Frontend Image
        uses: docker/build-push-action@v5
        with:
          context: ./frontend
          push: true
          tags: |
            ghcr.io/${{ github.repository_owner }}/frontend:latest
            ghcr.io/${{ github.repository_owner }}/frontend:${{ github.sha }}

  notify-deployment-ready:
    runs-on: ubuntu-latest
    needs: [test-backend, test-frontend, api-test-all, gui-test-cypress, build-and-push-backend, build-and-push-frontend]
    steps:
      - name: Notify Team
        run: |
          echo "CI/CD ÊµÅÊ∞¥Á∫øÊàêÂäüÂÆåÊàêÔºÅ"
          echo "ÊâÄÊúâÊµãËØïÔºàÂçïÂÖÉ„ÄÅAPI„ÄÅGUIÔºâÂùáÂ∑≤ÈÄöËøáÔºÅ"
          echo "ÊâÄÊúâDockerÈïúÂÉèÂ∑≤Êé®ÈÄÅËá≥ GitHub Container Registry„ÄÇ"
          echo "ËØ∑ÊàêÂëòCÂú®Êú¨Âú∞ÊâßË°å‰ª•‰∏ãÂëΩ‰ª§ËøõË°åÈÉ®ÁΩ≤Ôºö"
          echo "kubectl apply -f k8s-manifests/"