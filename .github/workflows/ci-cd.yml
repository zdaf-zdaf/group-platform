name: group-pipeline

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

jobs:
  test-backend:
    runs-on: ubuntu-latest
    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: rootpassword
          MYSQL_DATABASE: test_db
          MYSQL_DEFAULT_AUTHENTICATION_PLUGIN: mysql_native_password
        ports:
          - 3306:3306
        options: >-
          --health-cmd="mysqladmin ping"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=3
    defaults:
      run:
        working-directory: ./backend
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      - name: Install dependencies with pip
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

    # 关键步骤：等待MySQL并就绪后，配置root用户权限
      - name: ⚙️ Configure MySQL for Django
        run: |
            sudo apt-get update && sudo apt-get install -y mysql-client
            # 等待MySQL启动
            for i in {1..30}; do
            if mysqladmin ping -h"127.0.0.1" -uroot -prootpassword --silent; then
                echo "MySQL is ready!"
                break
            fi
            echo "Waiting for MySQL... (attempt $i/30)"
            sleep 2
            done
            # 关键命令：确保root用户可以使用mysql_native_password插件从任何主机连接
            mysql -h"127.0.0.1" -uroot -prootpassword -e "
            ALTER USER 'root'@'%' IDENTIFIED WITH mysql_native_password BY 'rootpassword';
            ALTER USER 'root'@'localhost' IDENTIFIED WITH mysql_native_password BY 'rootpassword';
            FLUSH PRIVILEGES;
            "

      - name: Run Django tests
        run: |
            # ===== 新增的调试命令 =====
            echo "1. 检查当前目录和Python路径"
            pwd
            echo "PYTHONPATH: $PYTHONPATH"
            
            echo "2. 检查环境变量"
            echo "DB_ENGINE: $DB_ENGINE"
            echo "DB_NAME: $DB_NAME"
            echo "DB_USER: $DB_USER"
            echo "DB_HOST: $DB_HOST"
            echo "DB_PORT: $DB_PORT"

            echo "3. 检查Django配置模块是否能被正确导入"
            python -c "
            import os
            print('DJANGO_SETTINGS_MODULE环境变量:', os.environ.get('DJANGO_SETTINGS_MODULE'))
            try:
                from django.conf import settings
                print('成功导入settings模块！')
                print('使用的设置文件:', settings.SETTINGS_MODULE)
            except Exception as e:
                print('导入失败，错误信息:', e)
            "
            
            echo "4. 以详细模式运行测试"
            python manage.py test --verbosity=2
        env:
            # 1. 设置Django配置模块（最关键）
            DJANGO_SETTINGS_MODULE: server.settings
            # 2. 设置Python路径，确保能找到你的项目
            PYTHONPATH: ${{ github.workspace }}/backend
            DB_ENGINE: django.db.backends.mysql
            DB_NAME: test_db
            DB_USER: root
            DB_PASSWORD: rootpassword
            DB_HOST: 127.0.0.1 
            DB_PORT: 3306
            DEBUG: False

  # 论坛测试
test-LunTan:
  name: LunTan Tests
  runs-on: ubuntu-latest
  needs: [test-backend] # 只依赖后端测试，不依赖其他API测试
  services:
    mysql:
      image: mysql:8.0
      env:
        MYSQL_ROOT_PASSWORD: rootpassword
        MYSQL_DATABASE: test_db
        MYSQL_DEFAULT_AUTHENTICATION_PLUGIN: mysql_native_password
      ports:
        - 3306:3306
  steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
    - name: 🚀 Start Django Server
      run: |
        python manage.py runserver 0.0.0.0:8000 &
        # ... 其他启动步骤
      working-directory: ./backend
    - name: ✅ Run Forum Tests
      run: |
        newman run postman/collection1-LunTan.json \
          --environment postman/environment.json \
          --reporters cli

# 公告测试
test-GongGao:
  name: GongGao Tests
  runs-on: ubuntu-latest
  needs: [test-backend] # 只依赖后端测试
  services:
    mysql:
      image: mysql:8.0
      env:
        MYSQL_ROOT_PASSWORD: rootpassword
        MYSQL_DATABASE: test_db
        MYSQL_DEFAULT_AUTHENTICATION_PLUGIN: mysql_native_password
      ports:
        - 3306:3306
  steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
    - name: 🚀 Start Django Server
      run: |
        python manage.py runserver 0.0.0.0:8001 & # 使用不同端口避免冲突
        # ... 其他启动步骤
      working-directory: ./backend
    - name: ✅ Run Announcement Tests
      run: |
        newman run postman/collection2-GongGao.json \
          --environment postman/environment.json \
          --reporters cli

# 实验测试
test-lab:
  name: Lab Tests
  runs-on: ubuntu-latest
  needs: [test-backend] # 只依赖后端测试
  services:
    mysql:
      image: mysql:8.0
      env:
        MYSQL_ROOT_PASSWORD: rootpassword
        MYSQL_DATABASE: test_db
        MYSQL_DEFAULT_AUTHENTICATION_PLUGIN: mysql_native_password
      ports:
        - 3306:3306
  steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
    - name: 🚀 Start Django Server
      run: |
        python manage.py runserver 0.0.0.0:8002 & # 使用不同端口
        # ... 其他启动步骤
      working-directory: ./backend
    - name: ✅ Run Lab Tests
      run: |
        newman run postman/collection3-Lab.json \
          --environment postman/environment.json \
          --reporters cli

  # 【新增的Job】运行Cypress前端E2E测试
  gui-test-cypress:
    name:  Run Cypress GUI Tests
    runs-on: ubuntu-latest
    # 【重要】设置依赖：必须等前端单元测试和API测试都通过后才运行
    needs: [test-frontend, test-LunTan, test-GongGao, test-lab] # 依赖所有API测试

    steps:
      - name:  Checkout code
        uses: actions/checkout@v4

      - name: ⎔ Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: './frontend/package-lock.json'

      # 安装前端依赖（Cypress已经包含在里面了）
      - name:  Install Frontend Dependencies
        run: npm ci
        working-directory: ./frontend

      # 运行Cypress测试！
      - name:  Run Cypress Tests
        run: npx cypress run --headless # `--headless`表示无界面模式，必须在CI环境中使用
        working-directory: ./frontend

  test-frontend:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./frontend
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: './frontend/package-lock.json'

      - name: Install frontend dependencies
        run: npm ci

      - name: Run frontend unit tests
        run: npm run test:unit

  build-and-push-backend:
    runs-on: ubuntu-latest
    needs: [test-backend]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GHCR_PAT }}

      - name: Build and Push Backend Image
        uses: docker/build-push-action@v5
        with:
          context: ./backend
          push: true
          tags: |
            ghcr.io/${{ github.repository_owner }}/backend:latest
            ghcr.io/${{ github.repository_owner }}/backend:${{ github.sha }}

  build-and-push-frontend:
    runs-on: ubuntu-latest
    needs: [test-frontend]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GHCR_PAT }}

      - name: Build and Push Frontend Image
        uses: docker/build-push-action@v5
        with:
          context: ./frontend
          push: true
          tags: |
            ghcr.io/${{ github.repository_owner }}/frontend:latest
            ghcr.io/${{ github.repository_owner }}/frontend:${{ github.sha }}

  notify-deployment-ready:
    runs-on: ubuntu-latest
    needs: [test-backend, test-frontend, test-LunTan, test-GongGao, test-lab, gui-test-cypress, build-and-push-backend, build-and-push-frontend]
    steps:
      - name: Notify Team
        run: |
          echo "CI/CD 流水线成功完成！"
          echo "所有测试（单元、API、GUI）均已通过！"
          echo "所有Docker镜像已推送至 GitHub Container Registry。"
          echo "请成员C在本地执行以下命令进行部署："
          echo "kubectl apply -f k8s-manifests/"