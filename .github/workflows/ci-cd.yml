name: group-pipeline

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

jobs:
  test-backend:
    runs-on: ubuntu-latest
    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: rootpassword
          MYSQL_DATABASE: test_db
          MYSQL_ROOT_HOST: '%'
        ports:
          - 3306:3306
        options: >-
          --health-cmd="mysqladmin ping"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=3
    defaults:
      run:
        working-directory: ./backend
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      - name: Install dependencies with pip
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Create test database and user
        run: |
            sudo apt-get update && sudo apt-get install -y mysql-client
            mysql -h"127.0.0.1" -u"root" -p"rootpassword" -e "
            CREATE DATABASE IF NOT EXISTS test_db;
            CREATE USER IF NOT EXISTS 'testuser'@'%' IDENTIFIED BY 'testpassword';
            GRANT ALL PRIVILEGES ON test_db.* TO 'testuser'@'%';
            FLUSH PRIVILEGES;
            "

      - name: Run Django tests
        run: |
            # ===== 新增的调试命令 =====
            echo "1. 检查当前目录和Python路径"
            pwd
            echo "PYTHONPATH: $PYTHONPATH"
            
            echo "2. 检查Django配置模块是否能被正确导入"
            python -c "
            import os
            print('DJANGO_SETTINGS_MODULE环境变量:', os.environ.get('DJANGO_SETTINGS_MODULE'))
            try:
                from django.conf import settings
                print('成功导入settings模块！')
                print('使用的设置文件:', settings.SETTINGS_MODULE)
            except Exception as e:
                print('导入失败，错误信息:', e)
            "
            
            echo "3. 以详细模式运行测试"
            python manage.py test --verbosity=2
        env:
            # 1. 设置Django配置模块（最关键）
            DJANGO_SETTINGS_MODULE: server.settings
            # 2. 设置Python路径，确保能找到你的项目
            PYTHONPATH: ${{ github.workspace }}/backend
            # 3. 为测试配置一个简单的数据库（如SQLite）
            DATABASE_URL: mysql://testuser:testpassword@127.0.0.1:3306/test_db
            # 4. 设置调试模式关闭（Django的生产环境要求）
            DEBUG: False

  test-frontend:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./frontend
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: './frontend/package-lock.json'

      - name: Install frontend dependencies
        run: npm ci

      - name: Run frontend unit tests
        run: npm test

  build-and-push-backend:
    runs-on: ubuntu-latest
    needs: [test-backend]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GHCR_PAT }}

      - name: Build and Push Backend Image
        uses: docker/build-push-action@v5
        with:
          context: ./backend
          push: true
          tags: |
            ghcr.io/${{ github.repository_owner }}/backend:latest
            ghcr.io/${{ github.repository_owner }}/backend:${{ github.sha }}

  build-and-push-frontend:
    runs-on: ubuntu-latest
    needs: [test-frontend]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GHCR_PAT }}

      - name: Build and Push Frontend Image
        uses: docker/build-push-action@v5
        with:
          context: ./frontend
          push: true
          tags: |
            ghcr.io/${{ github.repository_owner }}/frontend:latest
            ghcr.io/${{ github.repository_owner }}/frontend:${{ github.sha }}

  notify-deployment-ready:
    runs-on: ubuntu-latest
    needs: [build-and-push-backend, build-and-push-frontend] #等待所有镜像推送成功
    steps:
      - name: Notify Team
        run: |
          echo "CI/CD 流水线成功完成！"
          echo "所有Docker镜像已推送至 GitHub Container Registry。"
          echo "请成员C在本地执行以下命令进行部署："
          echo "kubectl apply -f k8s-manifests/"