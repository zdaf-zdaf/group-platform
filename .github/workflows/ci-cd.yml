name: group-pipeline

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

jobs:
  # ================== 后端测试（容器化） ==================
  test-backend:
    runs-on: ubuntu-latest
    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: 956402436
          MYSQL_DATABASE: lab_platform
        ports:
          - 3306:3306
        options: >-
          --health-cmd="mysqladmin ping -uroot -p956402436"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5
      backend:
        build:
          context: ./backend
        image: course-backend:latest
        env:
          DB_HOST: mysql
          DB_PORT: 3306
          DB_NAME: lab_platform
          DB_USER: root
          DB_PASSWORD: 956402436
        ports:
          - 8000:8000
        options: >-
          --health-cmd="curl --fail http://localhost:8000/ || exit 1"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=10
          -v /var/run/docker.sock:/var/run/docker.sock
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Wait for backend service ready
        run: |
          for i in {1..30}; do
            if curl -s http://localhost:8000/ > /dev/null; then
              echo "Backend is ready!"; break
            fi
            echo "Waiting for backend... ($i/30)"; sleep 2
          done

      - name: Run migrations
        run: |
          docker exec $(docker ps -qf "name=backend") python manage.py migrate --noinput

      - name: Run backend unit tests
        run: |
          docker exec $(docker ps -qf "name=backend") python manage.py test --verbosity=2

      - name: Install Newman
        run: npm install -g newman

      - name: Run Postman API tests
        run: |
          newman run postman/collection1-LunTan.json -e postman/environment.json
          newman run postman/collection2-Lab.json -e postman/environment.json
          newman run postman/collection3-GongGao.json -e postman/environment.json


  # 【新增的Job】运行Cypress前端E2E测试
  gui-test-cypress:
    name:  Run Cypress GUI Tests
    runs-on: ubuntu-latest
    # 【重要】设置依赖：必须等前端单元测试和API测试都通过后才运行
    needs: [test-frontend, api-test-luntan, api-test-lab, api-test-gonggao]  # 依赖所有并行测试

    steps:
      - name:  Checkout code
        uses: actions/checkout@v4

      - name: ⎔ Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: './frontend/package-lock.json'

      # 安装前端依赖（Cypress已经包含在里面了）
      - name:  Install Frontend Dependencies
        run: npm ci
        working-directory: ./frontend

      # 运行Cypress测试！
      - name:  Run Cypress Tests
        run: npx cypress run --headless # `--headless`表示无界面模式，必须在CI环境中使用
        working-directory: ./frontend

  test-frontend:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./frontend
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: './frontend/package-lock.json'

      - name: Install frontend dependencies
        run: npm ci

      - name: Run frontend unit tests
        run: npm run test:unit

  build-and-push-backend:
    runs-on: ubuntu-latest
    needs: [test-backend]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GHCR_PAT }}

      - name: Build and Push Backend Image
        uses: docker/build-push-action@v5
        with:
          context: ./backend
          push: true
          tags: |
            ghcr.io/${{ github.repository_owner }}/backend:latest
            ghcr.io/${{ github.repository_owner }}/backend:${{ github.sha }}

  build-and-push-frontend:
    runs-on: ubuntu-latest
    needs: [test-frontend]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GHCR_PAT }}

      - name: Build and Push Frontend Image
        uses: docker/build-push-action@v5
        with:
          context: ./frontend
          push: true
          tags: |
            ghcr.io/${{ github.repository_owner }}/frontend:latest
            ghcr.io/${{ github.repository_owner }}/frontend:${{ github.sha }}

  notify-deployment-ready:
    runs-on: ubuntu-latest
    needs: [test-backend, test-frontend, api-test-luntan, api-test-lab, api-test-gonggao, gui-test-cypress, build-and-push-backend, build-and-push-frontend]
    steps:
      - name: Notify Team
        run: |
          echo "CI/CD 流水线成功完成！"
          echo "所有测试（单元、API、GUI）均已通过！"
          echo "所有Docker镜像已推送至 GitHub Container Registry。"
          echo "请成员C在本地执行以下命令进行部署："
          echo "kubectl apply -f k8s-manifests/"
