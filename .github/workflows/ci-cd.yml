name: group-pipeline

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

jobs:
  test-backend:
    runs-on: ubuntu-latest
    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: rootpassword
          MYSQL_DATABASE: test_db
          MYSQL_DEFAULT_AUTHENTICATION_PLUGIN: mysql_native_password
        ports:
          - 3306:3306
        options: >-
          --health-cmd="mysqladmin ping"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=3
    defaults:
      run:
        working-directory: ./backend
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      - name: Install dependencies with pip
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

    # 关键步骤：等待MySQL并就绪后，配置root用户权限
      - name: ⚙️ Configure MySQL for Django
        run: |
            sudo apt-get update && sudo apt-get install -y mysql-client
            # 等待MySQL启动
            for i in {1..30}; do
            if mysqladmin ping -h"127.0.0.1" -uroot -prootpassword --silent; then
                echo "MySQL is ready!"
                break
            fi
            echo "Waiting for MySQL... (attempt $i/30)"
            sleep 2
            done
            # 关键命令：确保root用户可以使用mysql_native_password插件从任何主机连接
            mysql -h"127.0.0.1" -uroot -prootpassword -e "
            ALTER USER 'root'@'%' IDENTIFIED WITH mysql_native_password BY 'rootpassword';
            ALTER USER 'root'@'localhost' IDENTIFIED WITH mysql_native_password BY 'rootpassword';
            FLUSH PRIVILEGES;
            "

      - name: Run Django tests
        run: |
            # ===== 新增的调试命令 =====
            echo "1. 检查当前目录和Python路径"
            pwd
            echo "PYTHONPATH: $PYTHONPATH"
            
            echo "2. 检查环境变量"
            echo "DB_ENGINE: $DB_ENGINE"
            echo "DB_NAME: $DB_NAME"
            echo "DB_USER: $DB_USER"
            echo "DB_HOST: $DB_HOST"
            echo "DB_PORT: $DB_PORT"

            echo "3. 检查Django配置模块是否能被正确导入"
            python -c "
            import os
            print('DJANGO_SETTINGS_MODULE环境变量:', os.environ.get('DJANGO_SETTINGS_MODULE'))
            try:
                from django.conf import settings
                print('成功导入settings模块！')
                print('使用的设置文件:', settings.SETTINGS_MODULE)
            except Exception as e:
                print('导入失败，错误信息:', e)
            "
            
            echo "4. 以详细模式运行测试"
            python manage.py test --verbosity=2
        env:
            # 1. 设置Django配置模块（最关键）
            DJANGO_SETTINGS_MODULE: server.settings
            # 2. 设置Python路径，确保能找到你的项目
            PYTHONPATH: ${{ github.workspace }}/backend
            DB_ENGINE: django.db.backends.mysql
            DB_NAME: test_db
            DB_USER: root
            DB_PASSWORD: rootpassword
            DB_HOST: 127.0.0.1 
            DB_PORT: 3306
            DEBUG: False

    # 统一的API测试Job - 顺序执行所有测试集
    api-test-all:
    name: 🧪 Run All API Tests (Sequential)
    runs-on: ubuntu-latest
    needs: [test-backend] # 依赖后端单元测试
    
    services:
        mysql:
        image: mysql:8.0
        env:
            MYSQL_ROOT_PASSWORD: rootpassword
            MYSQL_DATABASE: test_db
            MYSQL_DEFAULT_AUTHENTICATION_PLUGIN: mysql_native_password
        ports:
            - 3306:3306
        options: >-
            --health-cmd="mysqladmin ping"
            --health-interval=10s
            --health-timeout=5s
            --health-retries=3

    steps:
        # 步骤1-4: 基础设置（与之前相同）
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        
      - name: 🐍 Set up Python
        uses: actions/setup-python@v5
        with:
            python-version: '3.10'
        
      - name: 📦 Install Python dependencies
        run: |
            python -m pip install --upgrade pip
            pip install -r requirements.txt
        working-directory: ./backend
        
      - name: ⚙️ Configure MySQL
        run: |
            sudo apt-get update && sudo apt-get install -y mysql-client
            # 等待MySQL启动
            for i in {1..30}; do
            if mysqladmin ping -h"127.0.0.1" -uroot -prootpassword --silent; then
                echo "MySQL is ready!"
                break
            fi
            echo "Waiting for MySQL... (attempt $i/30)"
            sleep 2
            done
            # 配置MySQL权限
            mysql -h"127.0.0.1" -uroot -prootpassword -e "
            ALTER USER 'root'@'%' IDENTIFIED WITH mysql_native_password BY 'rootpassword';
            FLUSH PRIVILEGES;
            "
        
        # 步骤5: 启动Django服务器
      - name: 🚀 Start Django Server
        run: |
            # 启动Django开发服务器在后台运行
            python manage.py runserver 0.0.0.0:8000 > django-server.log 2>&1 &
            SERVER_PID=$!
            echo "Django server started with PID: $SERVER_PID"
            echo $SERVER_PID > server.pid
            
            # 等待服务器启动
            for i in {1..10}; do
            if curl -s http://localhost:8000/ > /dev/null; then
                echo "Server is up and running!"
                break
            fi
            echo "Waiting for server to start... ($i/10)"
            sleep 3
            done
            
            # 如果服务器启动失败，显示日志
            if ! ps -p $SERVER_PID > /dev/null; then
            echo "Django server failed to start!"
            cat django-server.log
            exit 1
            fi
        working-directory: ./backend
        env:
            DJANGO_SETTINGS_MODULE: server.settings
            DB_ENGINE: django.db.backends.mysql
            DB_NAME: test_db
            DB_USER: root
            DB_PASSWORD: rootpassword
            DB_HOST: 127.0.0.1
            DB_PORT: 3306
            DEBUG: False
        
        # 步骤6: 安装Newman
      - name: 📦 Install Newman
        run: npm install -g newman
        
        # 步骤7: 运行论坛测试集
      - name: 💬 Run Forum Tests (LunTan)
        run: |
            # 修改环境变量文件，将localhost替换为127.0.0.1
            sed -i 's/localhost/127.0.0.1/g' postman/environment.json
            
            # 运行论坛测试
            newman run postman/collection1-LunTan.json \
            --environment postman/environment.json \
            --global-var "api_url=127.0.0.1:8000" \
            --reporters cli
            
            echo "Forum tests completed!"
        
        # 步骤8: 清空数据库（在论坛测试后）
      - name: 🗑️ Clean Database After Forum Tests
        run: |
            # 使用Django的flush命令清空数据库但保留表结构
            python manage.py flush --no-input
            
            # 或者使用原始SQL命令清空所有表（更彻底）
            # mysql -h"127.0.0.1" -uroot -prootpassword test_db -e "
            #   SET FOREIGN_KEY_CHECKS = 0;
            #   SELECT CONCAT('TRUNCATE TABLE ', table_name, ';')
            #   FROM information_schema.tables
            #   WHERE table_schema = 'test_db'
            #   INTO OUTFILE '/tmp/truncate_tables.sql';
            #   SOURCE /tmp/truncate_tables.sql;
            #   SET FOREIGN_KEY_CHECKS = 1;
            # "
            echo "Database cleaned after forum tests!"
        working-directory: ./backend
        env:
            DJANGO_SETTINGS_MODULE: server.settings
            DB_ENGINE: django.db.backends.mysql
            DB_NAME: test_db
            DB_USER: root
            DB_PASSWORD: rootpassword
            DB_HOST: 127.0.0.1
            DB_PORT: 3306
            DEBUG: False
        
        # 步骤9: 运行实验测试集
      - name: 🔬 Run Lab Tests
        run: |
            # 运行实验测试
            newman run postman/collection2-Lab.json \
            --environment postman/environment.json \
            --global-var "api_url=127.0.0.1:8000" \
            --reporters cli
            
            echo "Lab tests completed!"
        
        # 步骤10: 清空数据库（在实验测试后）
      - name: 🗑️ Clean Database After Lab Tests
        run: |
            python manage.py flush --no-input
            echo "Database cleaned after lab tests!"
        working-directory: ./backend
        env:
            DJANGO_SETTINGS_MODULE: server.settings
            DB_ENGINE: django.db.backends.mysql
            DB_NAME: test_db
            DB_USER: root
            DB_PASSWORD: rootpassword
            DB_HOST: 127.0.0.1
            DB_PORT: 3306
            DEBUG: False
        
        # 步骤11: 运行公告测试集
      - name: 📢 Run Announcement Tests (GongGao)
        run: |
            # 运行公告测试
            newman run postman/collection3-GongGao.json \
            --environment postman/environment.json \
            --global-var "api_url=127.0.0.1:8000" \
            --reporters cli
            
            echo "Announcement tests completed!"
        
        # 步骤12: 最终清空数据库
      - name: 🗑️ Final Database Cleanup
        run: |
            python manage.py flush --no-input
            echo "Final database cleanup completed!"
        working-directory: ./backend
        env:
            DJANGO_SETTINGS_MODULE: server.settings
            DB_ENGINE: django.db.backends.mysql
            DB_NAME: test_db
            DB_USER: root
            DB_PASSWORD: rootpassword
            DB_HOST: 127.0.0.1
            DB_PORT: 3306
            DEBUG: False
        
        # 步骤13: 停止Django服务器
      - name: 🛑 Stop Django Server
        run: |
            if [ -f server.pid ]; then
            SERVER_PID=$(cat server.pid)
            echo "Stopping Django server with PID: $SERVER_PID"
            kill $SERVER_PID || true
            rm -f server.pid
            fi
            echo "Django server stopped!"

  test-frontend:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./frontend
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: './frontend/package-lock.json'

      - name: Install frontend dependencies
        run: npm ci

      - name: Run frontend unit tests
        run: npm run test:unit

  build-and-push-backend:
    runs-on: ubuntu-latest
    needs: [test-backend]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GHCR_PAT }}

      - name: Build and Push Backend Image
        uses: docker/build-push-action@v5
        with:
          context: ./backend
          push: true
          tags: |
            ghcr.io/${{ github.repository_owner }}/backend:latest
            ghcr.io/${{ github.repository_owner }}/backend:${{ github.sha }}

  build-and-push-frontend:
    runs-on: ubuntu-latest
    needs: [test-frontend]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GHCR_PAT }}

      - name: Build and Push Frontend Image
        uses: docker/build-push-action@v5
        with:
          context: ./frontend
          push: true
          tags: |
            ghcr.io/${{ github.repository_owner }}/frontend:latest
            ghcr.io/${{ github.repository_owner }}/frontend:${{ github.sha }}

  notify-deployment-ready:
    runs-on: ubuntu-latest
    needs: [test-backend, test-frontend, test_LunTan, test_GongGao, test_lab, gui-test-cypress, build-and-push-backend, build-and-push-frontend]
    steps:
      - name: Notify Team
        run: |
          echo "CI/CD 流水线成功完成！"
          echo "所有测试（单元、API、GUI）均已通过！"
          echo "所有Docker镜像已推送至 GitHub Container Registry。"
          echo "请成员C在本地执行以下命令进行部署："
          echo "kubectl apply -f k8s-manifests/"