name: CI/CD

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  # ================== 后端测试（容器化） ==================
  test-backend:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker
        uses: docker/setup-buildx-action@v3

      - name: Create network
        run: docker network create my-app-network

      - name: Run MySQL container
        run: |
          docker run -d --name mysql-db --network my-app-network \
            -e MYSQL_ROOT_PASSWORD=956402436 \
            -e MYSQL_DATABASE=lab_platform \
            -p 3307:3306 \
            mysql:8.0
          echo "Waiting for MySQL..."
          for i in {1..30}; do
            if docker exec mysql-db mysqladmin ping -uroot -p956402436 --silent; then
              echo "MySQL is ready!"
              break
            fi
            sleep 2
          done

      - name: Build backend image
        working-directory: ./backend
        run: docker build -t course-backend:latest .

      - name: Run backend container
        run: |
          docker run -d --name course-backend-container --network my-app-network \
            -e DB_HOST=mysql-db \
            -e DB_PORT=3306 \
            -e DB_NAME=lab_platform \
            -e DB_USER=root \
            -e DB_PASSWORD=956402436 \
            -p 8000:8000 \
            course-backend:latest
          echo "Waiting for backend..."
          sleep 10

      - name: Run migrations
        run: docker exec course-backend-container python manage.py migrate --noinput

      - name: Run backend tests
        run: docker exec course-backend-container python manage.py test --verbosity=2

  # ================== API 测试（论坛模块） ==================
  api-test-luntan:
    runs-on: ubuntu-latest
    needs: test-backend
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Newman
        run: npm install -g newman

      - name: Run Postman tests (论坛)
        run: newman run postman/luntan.postman_collection.json -e postman/environment.json

  # ================== API 测试（实验模块） ==================
  api-test-lab:
    runs-on: ubuntu-latest
    needs: test-backend
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Newman
        run: npm install -g newman

      - name: Run Postman tests (实验)
        run: newman run postman/lab.postman_collection.json -e postman/environment.json

  # ================== API 测试（公告模块） ==================
  api-test-gonggao:
    runs-on: ubuntu-latest
    needs: test-backend
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Newman
        run: npm install -g newman

      - name: Run Postman tests (公告)
        run: newman run postman/gonggao.postman_collection.json -e postman/environment.json
    gui-test-cypress:
    name:  Run Cypress GUI Tests
    runs-on: ubuntu-latest
    # 【重要】设置依赖：必须等前端单元测试和API测试都通过后才运行
    needs: [test-frontend, api-test-luntan, api-test-lab, api-test-gonggao]  # 依赖所有并行测试

    steps:
      - name:  Checkout code
        uses: actions/checkout@v4

      - name: ⎔ Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: './frontend/package-lock.json'

      # 安装前端依赖（Cypress已经包含在里面了）
      - name:  Install Frontend Dependencies
        run: npm ci
        working-directory: ./frontend

      # 运行Cypress测试！
      - name:  Run Cypress Tests
        run: npx cypress run --headless # `--headless`表示无界面模式，必须在CI环境中使用
        working-directory: ./frontend

  test-frontend:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./frontend
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: './frontend/package-lock.json'

      - name: Install frontend dependencies
        run: npm ci

      - name: Run frontend unit tests
        run: npm run test:unit

  build-and-push-backend:
    runs-on: ubuntu-latest
    needs: [test-backend]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GHCR_PAT }}

      - name: Build and Push Backend Image
        uses: docker/build-push-action@v5
        with:
          context: ./backend
          push: true
          tags: |
            ghcr.io/${{ github.repository_owner }}/backend:latest
            ghcr.io/${{ github.repository_owner }}/backend:${{ github.sha }}

  build-and-push-frontend:
    runs-on: ubuntu-latest
    needs: [test-frontend]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GHCR_PAT }}

      - name: Build and Push Frontend Image
        uses: docker/build-push-action@v5
        with:
          context: ./frontend
          push: true
          tags: |
            ghcr.io/${{ github.repository_owner }}/frontend:latest
            ghcr.io/${{ github.repository_owner }}/frontend:${{ github.sha }}

  notify-deployment-ready:
    runs-on: ubuntu-latest
    needs: [test-backend, test-frontend, api-test-luntan, api-test-lab, api-test-gonggao, gui-test-cypress, build-and-push-backend, build-and-push-frontend]
    steps:
      - name: Notify Team
        run: |
          echo "CI/CD 流水线成功完成！"
          echo "所有测试（单元、API、GUI）均已通过！"
          echo "所有Docker镜像已推送至 GitHub Container Registry。"
          echo "请成员C在本地执行以下命令进行部署："
          echo "kubectl apply -f k8s-manifests/"
